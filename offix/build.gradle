apply plugin: 'com.android.library'
apply plugin: 'com.apollographql.android'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco-android'
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.4'
    }
}

task cleanBuildPublish(type: GradleBuild) {
    tasks = ['clean', 'build', 'bintrayUpload' , 'sourcesJar' ,'javadocJar' , 'javadoc']
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation "android.arch.lifecycle:extensions:1.1.1"

    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.apollographql.apollo:apollo-rx2-support:1.2.0'

    implementation 'com.apollographql.apollo:apollo-android-support:1.2.0'
    implementation 'com.apollographql.apollo:apollo-runtime:1.2.0'

    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.1'

    compileOnly 'org.jetbrains:annotations:13.0'
    testCompileOnly 'org.jetbrains:annotations:13.0'

    annotationProcessor "android.arch.persistence.room:compiler:1.1.1"

    implementation "android.arch.persistence.room:runtime:1.1.1"
    kapt "android.arch.persistence.room:compiler:1.1.1"

    implementation "android.arch.work:work-runtime-ktx:1.0.1"
    implementation 'com.google.code.gson:gson:2.8.5'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

ext {
    bintrayRepo = 'Offix'
    bintrayName = 'Offix'

    publishedGroupId = 'org.aerogear.offix'
    libraryName = 'Offix'
    artifact = 'Offix'

    libraryDescription = 'Offix extends capabilities of Apollo GraphQL providing\n' +
            'fully featured Offline Workflow and Conflict Resolution for Android Platform'

    siteUrl = 'https://github.com/aerogear/offix-android'
    gitUrl = 'https://github.com/aerogear/offix-android.git'
    libraryVersion = '0.4.0'
    developerId = 'Lavanyagaur22'
    developerName = 'Lavanya Gaur'
    developerEmail = 'lavanyagaur22@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

//task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
//    group = "Reporting"
//    description = "Generate Jacoco coverage reports after running tests."
//    reports {
//        xml.enabled = true // coveralls plugin depends on xml format report
//        html.enabled = true
//    }
//    // class R is used, but usage will not be covered, so ignore this class from report
//    // This differs per plugin version (0.10 -> 0.11)
//    // have very different fileTrees.
//    // I have added rules to Ignore Dagger/Butterknife
//    classDirectories = fileTree(
//            dir: './build/intermediates/classes/debug',
//            excludes: ['com/myapp/R*.class',
//                       '**/*$InjectAdapter.class',
//                       '**/*$ModuleAdapter.class',
//                       '**/*$ViewInjector*.class'
//            ])
//    sourceDirectories = files(coverageSourceDirs)
//    executionData = files('build/jacoco/testDebug.exec')
//    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
//    // We iterate through the compiled .class tree and rename $$ to $.
//    doFirst {
//        new File('myapp/build/intermediates/classes/').eachFileRecurse { file ->
//            if (file.name.contains('$$')) {
//                file.renameTo(file.path.replace('$$', '$'))
//            }
//        }
//    }
//    afterEvaluate {
//        // just clean up coveralls dashboard, following reports are not of interest
//        testDebug.reports.junitXml.enabled = false
//    }
//}
    apply from: 'publish.gradle'
